{"version":3,"sources":["webpack://_N_E/./components/PostForm.js","webpack://_N_E/./pages/index.js","webpack://_N_E/./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js"],"names":["PostForm","useSelector","state","post","imagePaths","addPostDone","dispatch","useDispatch","useInput","text","onChangeText","setText","useEffect","onSubmit","useCallback","trim","alert","formData","FormData","forEach","p","append","type","ADD_POST_REQUEST","data","imageInput","useRef","onClickImageUpload","current","click","onChangeImages","e","console","log","target","files","imageFormData","call","f","UPLOAD_IMAGES_REQUEST","onRemoveImage","index","REMOVE_IMAGE","style","margin","encType","onFinish","TextArea","value","name","onChange","placeholder","maxLength","multiple","hidden","ref","onClick","float","map","v","i","display","src","width","alt","Home","me","user","mainPosts","hasMorePost","loadPostsLoading","retweetError","onScroll","window","scrollY","document","documentElement","clientHeight","scrollHeight","lastId","length","id","LOAD_POSTS_REQUEST","addEventListener","removeEventListener","AppLayout","PostCard","__NEXT_P","push"],"mappings":"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","file":"static/chunks/pages/index-a238a17a7588e80f94e5.js","sourcesContent":["import {Form, Input, Button} from 'antd';\r\nimport React, { useCallback, useEffect, useRef } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport useInput from '../hooks/useInput';\r\nimport { addPost, UPLOAD_IMAGES_REQUEST, REMOVE_IMAGE, ADD_POST_REQUEST } from '../reducers/post';\r\n\r\n\r\nconst PostForm = () => {\r\n    const {imagePaths, addPostDone} = useSelector((state) => state.post);\r\n    const dispatch = useDispatch();\r\n    const [text, onChangeText,setText] = useInput('');\r\n\r\n    useEffect(() => {\r\n        if(addPostDone){\r\n            setText('');\r\n        }\r\n    }, [addPostDone]);\r\n\r\n    const onSubmit = useCallback(() => {\r\n        if(!text || !text.trim()){\r\n            return alert('게시글을 작성하세요.');\r\n        }\r\n        const formData = new FormData();\r\n        imagePaths.forEach((p) => {\r\n            formData.append('image', p)\r\n        });\r\n        formData.append('content', text);\r\n        dispatch({\r\n            type: ADD_POST_REQUEST,\r\n            data: formData,\r\n        });\r\n    }, [text, imagePaths]);\r\n\r\n    const imageInput = useRef();\r\n    const onClickImageUpload = useCallback(() => {\r\n        imageInput.current.click();\r\n    }, [imageInput.current])\r\n    const onChangeImages = useCallback((e) => {\r\n        console.log('images', e.target.files);\r\n        const imageFormData = new FormData();\r\n        [].forEach.call(e.target.files, (f) => {\r\n            imageFormData.append('image', f);\r\n        });\r\n        dispatch({\r\n            type: UPLOAD_IMAGES_REQUEST,\r\n            data: imageFormData,\r\n        });\r\n    });\r\n\r\n    //map안에서 데이터값을 함수에 넣고싶으면 고차함수로 만들자\r\n    const onRemoveImage = useCallback((index) => () => {\r\n        dispatch({\r\n            type: REMOVE_IMAGE,\r\n            data: index,\r\n        });\r\n    });\r\n\r\n    return(\r\n        <Form style={{margin: '10px 0 20px'}} encType=\"multipart/form-data\" onFinish={onSubmit}>\r\n            <Input.TextArea value={text} name=\"image\" onChange={onChangeText} \r\n            placeholder=\"무슨일이 있었나요?\" maxLength={140} />\r\n            <div>\r\n                <input type='file' multiple hidden ref={imageInput} onChange={onChangeImages}/>\r\n                <Button onClick={onClickImageUpload}>이미지 업로드</Button>\r\n                <Button style=\"primary\" style={{float:'right'}} htmlType=\"submit\">짹짹</Button>\r\n            </div>\r\n            <div>\r\n                {imagePaths.map((v, i) => (\r\n                    <div key={v} style={{display:'inline-block'}}>\r\n                        <img src={`http://localhost:3065/${v}`} style={{width:'200px'}} alt={v} />\r\n                        <div>\r\n                            <Button onClick={onRemoveImage(i)}>제거</Button>\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </Form>\r\n    );\r\n}\r\n\r\nexport default PostForm;","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {END} from 'redux-saga';\r\nimport axios from 'axios';\r\n\r\nimport AppLayout from '../components/AppLayout';\r\nimport PostForm from '../components/PostForm';\r\nimport PostCard from '../components/PostCard';\r\nimport { LOAD_POSTS_REQUEST } from '../reducers/post';\r\nimport { LOAD_MY_INFO_REQUEST } from '../reducers/user';\r\nimport wrapper from '../store/configureStore';\r\n\r\n\r\nconst Home = () => {\r\n    const dispatch = useDispatch();\r\n    const {me} = useSelector((state) => state.user);\r\n    const {mainPosts, hasMorePost, loadPostsLoading, retweetError} = useSelector((state) => state.post);\r\n\r\n    useEffect(() => {\r\n        if(retweetError){\r\n            alert(retweetError);\r\n        }\r\n    }, [retweetError]);\r\n\r\n    useEffect(() => {\r\n        function onScroll(){\r\n            if(window.scrollY + document.documentElement.clientHeight \r\n                > document.documentElement.scrollHeight - 300){\r\n                    if(hasMorePost && !loadPostsLoading){\r\n                        const lastId = mainPosts[mainPosts.length - 1]?.id;\r\n                        dispatch({\r\n                            type: LOAD_POSTS_REQUEST,\r\n                            lastId,\r\n                        });\r\n                    }\r\n                }\r\n        }\r\n        window.addEventListener('scroll', onScroll);\r\n        return () => {\r\n            window.removeEventListener('scroll', onScroll);\r\n        };\r\n    }, [hasMorePost, loadPostsLoading, mainPosts]);\r\n\r\n    return(\r\n        <AppLayout>\r\n            {me && <PostForm />}\r\n            {mainPosts.map((post, i) => <PostCard key={post.id} post={post} />)}\r\n        </AppLayout>\r\n    );\r\n};\r\n\r\nexport const getServerSideProps = wrapper.getServerSideProps(async (context) => {\r\n    //console.log(context);\r\n    const cookie = context.req ? context.req.headers.cookie : '';\r\n    axios.defaults.headers.Cookie = '';\r\n    if(context.req && cookie){\r\n        axios.defaults.headers.Cookie = cookie;\r\n    }\r\n\r\n    context.store.dispatch({\r\n        type: LOAD_MY_INFO_REQUEST,\r\n    });\r\n    context.store.dispatch({\r\n        type: LOAD_POSTS_REQUEST,\r\n    });\r\n    context.store.dispatch(END);\r\n    //sagaTack는 store에서 설정했음\r\n    await context.store.sagaTask.toPromise();\r\n});\r\n\r\nexport default Home;","\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/\",\n      function () {\n        return require(\"private-next-pages/index.js\");\n      }\n    ]);\n  "],"sourceRoot":""}